### YamlMime:TSType
name: Namespaces
uid: azure-arm-eventhub.Namespaces
package: azure-arm-eventhub
summary: ''
fullName: Namespaces
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: >-
      beginCreateOrUpdate(string, string, EHNamespace,
      ServiceCallback<EHNamespace>)
    uid: azure-arm-eventhub.Namespaces.beginCreateOrUpdate_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, namespaceName:
        string, parameters: EHNamespace, callback: ServiceCallback<EHNamespace>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
          description: ''
  - name: >-
      beginCreateOrUpdate(string, string, EHNamespace, { customHeaders?: [key:
      string]: string })
    uid: azure-arm-eventhub.Namespaces.beginCreateOrUpdate
    package: azure-arm-eventhub
    summary: |-
      Creates or updates a namespace. Once created, this namespace's resource
      manifest is immutable. This operation is idempotent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, namespaceName:
        string, parameters: EHNamespace, options?: { customHeaders?: [key:
        string]: string }): Promise<EHNamespace>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: |
            Parameters for creating a namespace resource.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {EHNamespace} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {EHNamespace} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.EHNamespace> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
  - name: >-
      beginCreateOrUpdate(string, string, EHNamespace, { customHeaders?: [key:
      string]: string }, ServiceCallback<EHNamespace>)
    uid: azure-arm-eventhub.Namespaces.beginCreateOrUpdate_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, namespaceName:
        string, parameters: EHNamespace, options: { customHeaders?: [key:
        string]: string }, callback: ServiceCallback<EHNamespace>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
          description: ''
  - name: >-
      beginCreateOrUpdateWithHttpOperationResponse(string, string, EHNamespace,
      { customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.beginCreateOrUpdateWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: |-
      Creates or updates a namespace. Once created, this namespace's resource
      manifest is immutable. This operation is idempotent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, parameters: EHNamespace, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<EHNamespace>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: |
            Parameters for creating a namespace resource.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.EHNamespace" />&gt;&gt;
  - name: 'beginDeleteMethod(string, string, ServiceCallback<void>)'
    uid: azure-arm-eventhub.Namespaces.beginDeleteMethod_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, namespaceName:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      beginDeleteMethod(string, string, { customHeaders?: [key: string]: string
      })
    uid: azure-arm-eventhub.Namespaces.beginDeleteMethod
    package: azure-arm-eventhub
    summary: |-
      Deletes an existing namespace. This operation also removes all associated
      resources under the namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, namespaceName:
        string, options?: { customHeaders?: [key: string]: string }):
        Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {null} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;void&gt;
  - name: >-
      beginDeleteMethod(string, string, { customHeaders?: [key: string]: string
      }, ServiceCallback<void>)
    uid: azure-arm-eventhub.Namespaces.beginDeleteMethod_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, namespaceName:
        string, options: { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      beginDeleteMethodWithHttpOperationResponse(string, string, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.beginDeleteMethodWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: |-
      Deletes an existing namespace. This operation also removes all associated
      resources under the namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMethodWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, options?: { customHeaders?: [key:
        string]: string }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: >-
      checkNameAvailability(CheckNameAvailabilityParameter,
      ServiceCallback<CheckNameAvailabilityResult>)
    uid: azure-arm-eventhub.Namespaces.checkNameAvailability_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(parameters:
        CheckNameAvailabilityParameter, callback:
        ServiceCallback<CheckNameAvailabilityResult>)
      parameters:
        - id: parameters
          type: <xref uid="azure-arm-eventhub.CheckNameAvailabilityParameter" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.CheckNameAvailabilityResult" />&gt;
          description: ''
  - name: >-
      checkNameAvailability(CheckNameAvailabilityParameter, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.checkNameAvailability
    package: azure-arm-eventhub
    summary: Check the give Namespace name availability.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(parameters:
        CheckNameAvailabilityParameter, options?: { customHeaders?: [key:
        string]: string }): Promise<CheckNameAvailabilityResult>
      parameters:
        - id: parameters
          type: <xref uid="azure-arm-eventhub.CheckNameAvailabilityParameter" />
          description: |
            Parameters to check availability of the given
            Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {CheckNameAvailabilityResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {CheckNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.CheckNameAvailabilityResult> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: >-
          Promise&lt;<xref uid="azure-arm-eventhub.CheckNameAvailabilityResult"
          />&gt;
  - name: >-
      checkNameAvailability(CheckNameAvailabilityParameter, { customHeaders?:
      [key: string]: string }, ServiceCallback<CheckNameAvailabilityResult>)
    uid: azure-arm-eventhub.Namespaces.checkNameAvailability_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(parameters:
        CheckNameAvailabilityParameter, options: { customHeaders?: [key:
        string]: string }, callback:
        ServiceCallback<CheckNameAvailabilityResult>)
      parameters:
        - id: parameters
          type: <xref uid="azure-arm-eventhub.CheckNameAvailabilityParameter" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.CheckNameAvailabilityResult" />&gt;
          description: ''
  - name: >-
      checkNameAvailabilityWithHttpOperationResponse(CheckNameAvailabilityParameter,
      { customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-eventhub.Namespaces.checkNameAvailabilityWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Check the give Namespace name availability.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailabilityWithHttpOperationResponse(parameters:
        CheckNameAvailabilityParameter, options?: { customHeaders?: [key:
        string]: string }):
        Promise<HttpOperationResponse<CheckNameAvailabilityResult>>
      parameters:
        - id: parameters
          type: <xref uid="azure-arm-eventhub.CheckNameAvailabilityParameter" />
          description: |
            Parameters to check availability of the given
            Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.CheckNameAvailabilityResult" />&gt;&gt;
  - name: 'createOrUpdate(string, string, EHNamespace, ServiceCallback<EHNamespace>)'
    uid: azure-arm-eventhub.Namespaces.createOrUpdate_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, namespaceName:
        string, parameters: EHNamespace, callback: ServiceCallback<EHNamespace>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
          description: ''
  - name: >-
      createOrUpdate(string, string, EHNamespace, { customHeaders?: [key:
      string]: string })
    uid: azure-arm-eventhub.Namespaces.createOrUpdate
    package: azure-arm-eventhub
    summary: |-
      Creates or updates a namespace. Once created, this namespace's resource
      manifest is immutable. This operation is idempotent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, namespaceName:
        string, parameters: EHNamespace, options?: { customHeaders?: [key:
        string]: string }): Promise<EHNamespace>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: |
            Parameters for creating a namespace resource.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {EHNamespace} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {EHNamespace} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.EHNamespace> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
  - name: >-
      createOrUpdate(string, string, EHNamespace, { customHeaders?: [key:
      string]: string }, ServiceCallback<EHNamespace>)
    uid: azure-arm-eventhub.Namespaces.createOrUpdate_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, namespaceName:
        string, parameters: EHNamespace, options: { customHeaders?: [key:
        string]: string }, callback: ServiceCallback<EHNamespace>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
          description: ''
  - name: >-
      createOrUpdateAuthorizationRule(string, string, string, AuthorizationRule,
      ServiceCallback<AuthorizationRule>)
    uid: azure-arm-eventhub.Namespaces.createOrUpdateAuthorizationRule_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateAuthorizationRule(resourceGroupName: string,
        namespaceName: string, authorizationRuleName: string, parameters:
        AuthorizationRule, callback: ServiceCallback<AuthorizationRule>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.AuthorizationRule" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.AuthorizationRule"
            />&gt;
          description: ''
  - name: >-
      createOrUpdateAuthorizationRule(string, string, string, AuthorizationRule,
      { customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.createOrUpdateAuthorizationRule
    package: azure-arm-eventhub
    summary: Creates or updates an AuthorizationRule for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateAuthorizationRule(resourceGroupName: string,
        namespaceName: string, authorizationRuleName: string, parameters:
        AuthorizationRule, options?: { customHeaders?: [key: string]: string }):
        Promise<AuthorizationRule>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: parameters
          type: <xref uid="azure-arm-eventhub.AuthorizationRule" />
          description: |
            The shared access AuthorizationRule.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {AuthorizationRule} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {AuthorizationRule} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.AuthorizationRule> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.AuthorizationRule" />&gt;
  - name: >-
      createOrUpdateAuthorizationRule(string, string, string, AuthorizationRule,
      { customHeaders?: [key: string]: string },
      ServiceCallback<AuthorizationRule>)
    uid: azure-arm-eventhub.Namespaces.createOrUpdateAuthorizationRule_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateAuthorizationRule(resourceGroupName: string,
        namespaceName: string, authorizationRuleName: string, parameters:
        AuthorizationRule, options: { customHeaders?: [key: string]: string },
        callback: ServiceCallback<AuthorizationRule>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.AuthorizationRule" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.AuthorizationRule"
            />&gt;
          description: ''
  - name: >-
      createOrUpdateAuthorizationRuleWithHttpOperationResponse(string, string,
      string, AuthorizationRule, { customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-eventhub.Namespaces.createOrUpdateAuthorizationRuleWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Creates or updates an AuthorizationRule for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        createOrUpdateAuthorizationRuleWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, authorizationRuleName: string,
        parameters: AuthorizationRule, options?: { customHeaders?: [key:
        string]: string }): Promise<HttpOperationResponse<AuthorizationRule>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: parameters
          type: <xref uid="azure-arm-eventhub.AuthorizationRule" />
          description: |
            The shared access AuthorizationRule.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.AuthorizationRule" />&gt;&gt;
  - name: >-
      createOrUpdateNetworkRuleSet(string, string, NetworkRuleSet,
      ServiceCallback<NetworkRuleSet>)
    uid: azure-arm-eventhub.Namespaces.createOrUpdateNetworkRuleSet_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateNetworkRuleSet(resourceGroupName: string,
        namespaceName: string, parameters: NetworkRuleSet, callback:
        ServiceCallback<NetworkRuleSet>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.NetworkRuleSet" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.NetworkRuleSet"
            />&gt;
          description: ''
  - name: >-
      createOrUpdateNetworkRuleSet(string, string, NetworkRuleSet, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.createOrUpdateNetworkRuleSet
    package: azure-arm-eventhub
    summary: Create or update NetworkRuleSet for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateNetworkRuleSet(resourceGroupName: string,
        namespaceName: string, parameters: NetworkRuleSet, options?: {
        customHeaders?: [key: string]: string }): Promise<NetworkRuleSet>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: parameters
          type: <xref uid="azure-arm-eventhub.NetworkRuleSet" />
          description: |
            The Namespace IpFilterRule.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {NetworkRuleSet} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {NetworkRuleSet} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.NetworkRuleSet> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.NetworkRuleSet" />&gt;
  - name: >-
      createOrUpdateNetworkRuleSet(string, string, NetworkRuleSet, {
      customHeaders?: [key: string]: string }, ServiceCallback<NetworkRuleSet>)
    uid: azure-arm-eventhub.Namespaces.createOrUpdateNetworkRuleSet_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateNetworkRuleSet(resourceGroupName: string,
        namespaceName: string, parameters: NetworkRuleSet, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<NetworkRuleSet>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.NetworkRuleSet" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.NetworkRuleSet"
            />&gt;
          description: ''
  - name: >-
      createOrUpdateNetworkRuleSetWithHttpOperationResponse(string, string,
      NetworkRuleSet, { customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-eventhub.Namespaces.createOrUpdateNetworkRuleSetWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Create or update NetworkRuleSet for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        createOrUpdateNetworkRuleSetWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, parameters: NetworkRuleSet, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<NetworkRuleSet>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: parameters
          type: <xref uid="azure-arm-eventhub.NetworkRuleSet" />
          description: |
            The Namespace IpFilterRule.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.NetworkRuleSet" />&gt;&gt;
  - name: >-
      createOrUpdateWithHttpOperationResponse(string, string, EHNamespace, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.createOrUpdateWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: |-
      Creates or updates a namespace. Once created, this namespace's resource
      manifest is immutable. This operation is idempotent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, parameters: EHNamespace, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<EHNamespace>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: |
            Parameters for creating a namespace resource.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.EHNamespace" />&gt;&gt;
  - name: 'deleteAuthorizationRule(string, string, string, ServiceCallback<void>)'
    uid: azure-arm-eventhub.Namespaces.deleteAuthorizationRule_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAuthorizationRule(resourceGroupName: string,
        namespaceName: string, authorizationRuleName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      deleteAuthorizationRule(string, string, string, { customHeaders?: [key:
      string]: string })
    uid: azure-arm-eventhub.Namespaces.deleteAuthorizationRule
    package: azure-arm-eventhub
    summary: Deletes an AuthorizationRule for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAuthorizationRule(resourceGroupName: string,
        namespaceName: string, authorizationRuleName: string, options?: {
        customHeaders?: [key: string]: string }): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {null} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;void&gt;
  - name: >-
      deleteAuthorizationRule(string, string, string, { customHeaders?: [key:
      string]: string }, ServiceCallback<void>)
    uid: azure-arm-eventhub.Namespaces.deleteAuthorizationRule_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAuthorizationRule(resourceGroupName: string,
        namespaceName: string, authorizationRuleName: string, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      deleteAuthorizationRuleWithHttpOperationResponse(string, string, string, {
      customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-eventhub.Namespaces.deleteAuthorizationRuleWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Deletes an AuthorizationRule for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        deleteAuthorizationRuleWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, authorizationRuleName: string, options?:
        { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: 'deleteMethod(string, string, ServiceCallback<void>)'
    uid: azure-arm-eventhub.Namespaces.deleteMethod_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, namespaceName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: 'deleteMethod(string, string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-eventhub.Namespaces.deleteMethod
    package: azure-arm-eventhub
    summary: |-
      Deletes an existing namespace. This operation also removes all associated
      resources under the namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, namespaceName: string,
        options?: { customHeaders?: [key: string]: string }): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {null} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;void&gt;
  - name: >-
      deleteMethod(string, string, { customHeaders?: [key: string]: string },
      ServiceCallback<void>)
    uid: azure-arm-eventhub.Namespaces.deleteMethod_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, namespaceName: string,
        options: { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      deleteMethodWithHttpOperationResponse(string, string, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.deleteMethodWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: |-
      Deletes an existing namespace. This operation also removes all associated
      resources under the namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, options?: { customHeaders?: [key:
        string]: string }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: 'get(string, string, ServiceCallback<EHNamespace>)'
    uid: azure-arm-eventhub.Namespaces.get_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, namespaceName: string, callback:
        ServiceCallback<EHNamespace>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
          description: ''
  - name: 'get(string, string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-eventhub.Namespaces.get
    package: azure-arm-eventhub
    summary: Gets the description of the specified namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, namespaceName: string, options?:
        { customHeaders?: [key: string]: string }): Promise<EHNamespace>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {EHNamespace} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {EHNamespace} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.EHNamespace> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
  - name: >-
      get(string, string, { customHeaders?: [key: string]: string },
      ServiceCallback<EHNamespace>)
    uid: azure-arm-eventhub.Namespaces.get_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, namespaceName: string, options:
        { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<EHNamespace>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
          description: ''
  - name: >-
      getAuthorizationRule(string, string, string,
      ServiceCallback<AuthorizationRule>)
    uid: azure-arm-eventhub.Namespaces.getAuthorizationRule_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAuthorizationRule(resourceGroupName: string, namespaceName:
        string, authorizationRuleName: string, callback:
        ServiceCallback<AuthorizationRule>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.AuthorizationRule"
            />&gt;
          description: ''
  - name: >-
      getAuthorizationRule(string, string, string, { customHeaders?: [key:
      string]: string })
    uid: azure-arm-eventhub.Namespaces.getAuthorizationRule
    package: azure-arm-eventhub
    summary: Gets an AuthorizationRule for a Namespace by rule name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAuthorizationRule(resourceGroupName: string, namespaceName:
        string, authorizationRuleName: string, options?: { customHeaders?: [key:
        string]: string }): Promise<AuthorizationRule>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {AuthorizationRule} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {AuthorizationRule} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.AuthorizationRule> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.AuthorizationRule" />&gt;
  - name: >-
      getAuthorizationRule(string, string, string, { customHeaders?: [key:
      string]: string }, ServiceCallback<AuthorizationRule>)
    uid: azure-arm-eventhub.Namespaces.getAuthorizationRule_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAuthorizationRule(resourceGroupName: string, namespaceName:
        string, authorizationRuleName: string, options: { customHeaders?: [key:
        string]: string }, callback: ServiceCallback<AuthorizationRule>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.AuthorizationRule"
            />&gt;
          description: ''
  - name: >-
      getAuthorizationRuleWithHttpOperationResponse(string, string, string, {
      customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-eventhub.Namespaces.getAuthorizationRuleWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Gets an AuthorizationRule for a Namespace by rule name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        getAuthorizationRuleWithHttpOperationResponse(resourceGroupName: string,
        namespaceName: string, authorizationRuleName: string, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<AuthorizationRule>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.AuthorizationRule" />&gt;&gt;
  - name: 'getMessagingPlan(string, string, ServiceCallback<MessagingPlan>)'
    uid: azure-arm-eventhub.Namespaces.getMessagingPlan_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMessagingPlan(resourceGroupName: string, namespaceName:
        string, callback: ServiceCallback<MessagingPlan>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.MessagingPlan"
            />&gt;
          description: ''
  - name: >-
      getMessagingPlan(string, string, { customHeaders?: [key: string]: string
      })
    uid: azure-arm-eventhub.Namespaces.getMessagingPlan
    package: azure-arm-eventhub
    summary: Gets messaging plan for specified namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMessagingPlan(resourceGroupName: string, namespaceName:
        string, options?: { customHeaders?: [key: string]: string }):
        Promise<MessagingPlan>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {MessagingPlan} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {MessagingPlan} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.MessagingPlan> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.MessagingPlan" />&gt;
  - name: >-
      getMessagingPlan(string, string, { customHeaders?: [key: string]: string
      }, ServiceCallback<MessagingPlan>)
    uid: azure-arm-eventhub.Namespaces.getMessagingPlan_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMessagingPlan(resourceGroupName: string, namespaceName:
        string, options: { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<MessagingPlan>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.MessagingPlan"
            />&gt;
          description: ''
  - name: >-
      getMessagingPlanWithHttpOperationResponse(string, string, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.getMessagingPlanWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Gets messaging plan for specified namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMessagingPlanWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, options?: { customHeaders?: [key:
        string]: string }): Promise<HttpOperationResponse<MessagingPlan>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.MessagingPlan" />&gt;&gt;
  - name: 'getNetworkRuleSet(string, string, ServiceCallback<NetworkRuleSet>)'
    uid: azure-arm-eventhub.Namespaces.getNetworkRuleSet_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getNetworkRuleSet(resourceGroupName: string, namespaceName:
        string, callback: ServiceCallback<NetworkRuleSet>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.NetworkRuleSet"
            />&gt;
          description: ''
  - name: >-
      getNetworkRuleSet(string, string, { customHeaders?: [key: string]: string
      })
    uid: azure-arm-eventhub.Namespaces.getNetworkRuleSet
    package: azure-arm-eventhub
    summary: Gets NetworkRuleSet for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getNetworkRuleSet(resourceGroupName: string, namespaceName:
        string, options?: { customHeaders?: [key: string]: string }):
        Promise<NetworkRuleSet>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {NetworkRuleSet} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {NetworkRuleSet} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.NetworkRuleSet> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.NetworkRuleSet" />&gt;
  - name: >-
      getNetworkRuleSet(string, string, { customHeaders?: [key: string]: string
      }, ServiceCallback<NetworkRuleSet>)
    uid: azure-arm-eventhub.Namespaces.getNetworkRuleSet_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getNetworkRuleSet(resourceGroupName: string, namespaceName:
        string, options: { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<NetworkRuleSet>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-eventhub.NetworkRuleSet"
            />&gt;
          description: ''
  - name: >-
      getNetworkRuleSetWithHttpOperationResponse(string, string, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.getNetworkRuleSetWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Gets NetworkRuleSet for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getNetworkRuleSetWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, options?: { customHeaders?: [key:
        string]: string }): Promise<HttpOperationResponse<NetworkRuleSet>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.NetworkRuleSet" />&gt;&gt;
  - name: >-
      getWithHttpOperationResponse(string, string, { customHeaders?: [key:
      string]: string })
    uid: azure-arm-eventhub.Namespaces.getWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Gets the description of the specified namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getWithHttpOperationResponse(resourceGroupName: string,
        namespaceName: string, options?: { customHeaders?: [key: string]: string
        }): Promise<HttpOperationResponse<EHNamespace>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.EHNamespace" />&gt;&gt;
  - name: list(ServiceCallback<EHNamespaceListResult>)
    uid: azure-arm-eventhub.Namespaces.list_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function list(callback: ServiceCallback<EHNamespaceListResult>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
          description: ''
  - name: 'list({ customHeaders?: [key: string]: string })'
    uid: azure-arm-eventhub.Namespaces.list
    package: azure-arm-eventhub
    summary: |-
      Lists all the available Namespaces within a subscription, irrespective of
      the resource groups.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(options?: { customHeaders?: [key: string]: string }):
        Promise<EHNamespaceListResult>
      parameters:
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {EHNamespaceListResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {EHNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.EHNamespaceListResult> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
  - name: >-
      list({ customHeaders?: [key: string]: string },
      ServiceCallback<EHNamespaceListResult>)
    uid: azure-arm-eventhub.Namespaces.list_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(options: { customHeaders?: [key: string]: string },
        callback: ServiceCallback<EHNamespaceListResult>)
      parameters:
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
          description: ''
  - name: >-
      listAuthorizationRules(string, string,
      ServiceCallback<AuthorizationRuleListResult>)
    uid: azure-arm-eventhub.Namespaces.listAuthorizationRules_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAuthorizationRules(resourceGroupName: string,
        namespaceName: string, callback:
        ServiceCallback<AuthorizationRuleListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.AuthorizationRuleListResult" />&gt;
          description: ''
  - name: >-
      listAuthorizationRules(string, string, { customHeaders?: [key: string]:
      string })
    uid: azure-arm-eventhub.Namespaces.listAuthorizationRules
    package: azure-arm-eventhub
    summary: Gets a list of authorization rules for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAuthorizationRules(resourceGroupName: string,
        namespaceName: string, options?: { customHeaders?: [key: string]: string
        }): Promise<AuthorizationRuleListResult>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {AuthorizationRuleListResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {AuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.AuthorizationRuleListResult> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: >-
          Promise&lt;<xref uid="azure-arm-eventhub.AuthorizationRuleListResult"
          />&gt;
  - name: >-
      listAuthorizationRules(string, string, { customHeaders?: [key: string]:
      string }, ServiceCallback<AuthorizationRuleListResult>)
    uid: azure-arm-eventhub.Namespaces.listAuthorizationRules_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAuthorizationRules(resourceGroupName: string,
        namespaceName: string, options: { customHeaders?: [key: string]: string
        }, callback: ServiceCallback<AuthorizationRuleListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.AuthorizationRuleListResult" />&gt;
          description: ''
  - name: >-
      listAuthorizationRulesNext(string,
      ServiceCallback<AuthorizationRuleListResult>)
    uid: azure-arm-eventhub.Namespaces.listAuthorizationRulesNext_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAuthorizationRulesNext(nextPageLink: string, callback:
        ServiceCallback<AuthorizationRuleListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.AuthorizationRuleListResult" />&gt;
          description: ''
  - name: >-
      listAuthorizationRulesNext(string, { customHeaders?: [key: string]: string
      })
    uid: azure-arm-eventhub.Namespaces.listAuthorizationRulesNext
    package: azure-arm-eventhub
    summary: Gets a list of authorization rules for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAuthorizationRulesNext(nextPageLink: string, options?: {
        customHeaders?: [key: string]: string }):
        Promise<AuthorizationRuleListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {AuthorizationRuleListResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {AuthorizationRuleListResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.AuthorizationRuleListResult> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: >-
          Promise&lt;<xref uid="azure-arm-eventhub.AuthorizationRuleListResult"
          />&gt;
  - name: >-
      listAuthorizationRulesNext(string, { customHeaders?: [key: string]: string
      }, ServiceCallback<AuthorizationRuleListResult>)
    uid: azure-arm-eventhub.Namespaces.listAuthorizationRulesNext_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAuthorizationRulesNext(nextPageLink: string, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<AuthorizationRuleListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.AuthorizationRuleListResult" />&gt;
          description: ''
  - name: >-
      listAuthorizationRulesNextWithHttpOperationResponse(string, {
      customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-eventhub.Namespaces.listAuthorizationRulesNextWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Gets a list of authorization rules for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        listAuthorizationRulesNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<AuthorizationRuleListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.AuthorizationRuleListResult" />&gt;&gt;
  - name: >-
      listAuthorizationRulesWithHttpOperationResponse(string, string, {
      customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-eventhub.Namespaces.listAuthorizationRulesWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Gets a list of authorization rules for a Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        listAuthorizationRulesWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, options?: { customHeaders?: [key:
        string]: string }):
        Promise<HttpOperationResponse<AuthorizationRuleListResult>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.AuthorizationRuleListResult" />&gt;&gt;
  - name: 'listByResourceGroup(string, ServiceCallback<EHNamespaceListResult>)'
    uid: azure-arm-eventhub.Namespaces.listByResourceGroup_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<EHNamespaceListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
          description: ''
  - name: 'listByResourceGroup(string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-eventhub.Namespaces.listByResourceGroup
    package: azure-arm-eventhub
    summary: Lists the available Namespaces within a resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?: {
        customHeaders?: [key: string]: string }): Promise<EHNamespaceListResult>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {EHNamespaceListResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {EHNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.EHNamespaceListResult> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
  - name: >-
      listByResourceGroup(string, { customHeaders?: [key: string]: string },
      ServiceCallback<EHNamespaceListResult>)
    uid: azure-arm-eventhub.Namespaces.listByResourceGroup_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<EHNamespaceListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
          description: ''
  - name: 'listByResourceGroupNext(string, ServiceCallback<EHNamespaceListResult>)'
    uid: azure-arm-eventhub.Namespaces.listByResourceGroupNext_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, callback:
        ServiceCallback<EHNamespaceListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
          description: ''
  - name: 'listByResourceGroupNext(string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-eventhub.Namespaces.listByResourceGroupNext
    package: azure-arm-eventhub
    summary: Lists the available Namespaces within a resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options?: {
        customHeaders?: [key: string]: string }): Promise<EHNamespaceListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {EHNamespaceListResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {EHNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.EHNamespaceListResult> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
  - name: >-
      listByResourceGroupNext(string, { customHeaders?: [key: string]: string },
      ServiceCallback<EHNamespaceListResult>)
    uid: azure-arm-eventhub.Namespaces.listByResourceGroupNext_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<EHNamespaceListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
          description: ''
  - name: >-
      listByResourceGroupNextWithHttpOperationResponse(string, { customHeaders?:
      [key: string]: string })
    uid: >-
      azure-arm-eventhub.Namespaces.listByResourceGroupNextWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Lists the available Namespaces within a resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupNextWithHttpOperationResponse(nextPageLink:
        string, options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<EHNamespaceListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;&gt;
  - name: >-
      listByResourceGroupWithHttpOperationResponse(string, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.listByResourceGroupWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Lists the available Namespaces within a resource group.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupWithHttpOperationResponse(resourceGroupName:
        string, options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<EHNamespaceListResult>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;&gt;
  - name: 'listKeys(string, string, string, ServiceCallback<AccessKeys>)'
    uid: azure-arm-eventhub.Namespaces.listKeys_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, namespaceName: string,
        authorizationRuleName: string, callback: ServiceCallback<AccessKeys>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.AccessKeys" />&gt;
          description: ''
  - name: >-
      listKeys(string, string, string, { customHeaders?: [key: string]: string
      })
    uid: azure-arm-eventhub.Namespaces.listKeys
    package: azure-arm-eventhub
    summary: Gets the primary and secondary connection strings for the Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, namespaceName: string,
        authorizationRuleName: string, options?: { customHeaders?: [key:
        string]: string }): Promise<AccessKeys>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {AccessKeys} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {AccessKeys} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.AccessKeys> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.AccessKeys" />&gt;
  - name: >-
      listKeys(string, string, string, { customHeaders?: [key: string]: string
      }, ServiceCallback<AccessKeys>)
    uid: azure-arm-eventhub.Namespaces.listKeys_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, namespaceName: string,
        authorizationRuleName: string, options: { customHeaders?: [key: string]:
        string }, callback: ServiceCallback<AccessKeys>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.AccessKeys" />&gt;
          description: ''
  - name: >-
      listKeysWithHttpOperationResponse(string, string, string, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.listKeysWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: Gets the primary and secondary connection strings for the Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeysWithHttpOperationResponse(resourceGroupName: string,
        namespaceName: string, authorizationRuleName: string, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<AccessKeys>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.AccessKeys" />&gt;&gt;
  - name: 'listNext(string, ServiceCallback<EHNamespaceListResult>)'
    uid: azure-arm-eventhub.Namespaces.listNext_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<EHNamespaceListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
          description: ''
  - name: 'listNext(string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-eventhub.Namespaces.listNext
    package: azure-arm-eventhub
    summary: |-
      Lists all the available Namespaces within a subscription, irrespective of
      the resource groups.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?: { customHeaders?:
        [key: string]: string }): Promise<EHNamespaceListResult>
      parameters:
        - id: nextPageLink
          type: string
          description: |
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {EHNamespaceListResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {EHNamespaceListResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.EHNamespaceListResult> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
  - name: >-
      listNext(string, { customHeaders?: [key: string]: string },
      ServiceCallback<EHNamespaceListResult>)
    uid: azure-arm-eventhub.Namespaces.listNext_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options: { customHeaders?: [key:
        string]: string }, callback: ServiceCallback<EHNamespaceListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;
          description: ''
  - name: >-
      listNextWithHttpOperationResponse(string, { customHeaders?: [key: string]:
      string })
    uid: azure-arm-eventhub.Namespaces.listNextWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: |-
      Lists all the available Namespaces within a subscription, irrespective of
      the resource groups.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listNextWithHttpOperationResponse(nextPageLink: string,
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<EHNamespaceListResult>>
      parameters:
        - id: nextPageLink
          type: string
          description: |
            The NextLink from the previous successful call
            to List operation.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;&gt;
  - name: 'listWithHttpOperationResponse({ customHeaders?: [key: string]: string })'
    uid: azure-arm-eventhub.Namespaces.listWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: |-
      Lists all the available Namespaces within a subscription, irrespective of
      the resource groups.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listWithHttpOperationResponse(options?: { customHeaders?: [key:
        string]: string }):
        Promise<HttpOperationResponse<EHNamespaceListResult>>
      parameters:
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.EHNamespaceListResult" />&gt;&gt;
  - name: >-
      regenerateKeys(string, string, string, RegenerateAccessKeyParameters,
      ServiceCallback<AccessKeys>)
    uid: azure-arm-eventhub.Namespaces.regenerateKeys_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKeys(resourceGroupName: string, namespaceName:
        string, authorizationRuleName: string, parameters:
        RegenerateAccessKeyParameters, callback: ServiceCallback<AccessKeys>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.RegenerateAccessKeyParameters" />
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.AccessKeys" />&gt;
          description: ''
  - name: >-
      regenerateKeys(string, string, string, RegenerateAccessKeyParameters, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.regenerateKeys
    package: azure-arm-eventhub
    summary: |-
      Regenerates the primary or secondary connection strings for the specified
      Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKeys(resourceGroupName: string, namespaceName:
        string, authorizationRuleName: string, parameters:
        RegenerateAccessKeyParameters, options?: { customHeaders?: [key:
        string]: string }): Promise<AccessKeys>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: parameters
          type: <xref uid="azure-arm-eventhub.RegenerateAccessKeyParameters" />
          description: |
            Parameters required to regenerate the connection
            string.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {AccessKeys} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {AccessKeys} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.AccessKeys> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.AccessKeys" />&gt;
  - name: >-
      regenerateKeys(string, string, string, RegenerateAccessKeyParameters, {
      customHeaders?: [key: string]: string }, ServiceCallback<AccessKeys>)
    uid: azure-arm-eventhub.Namespaces.regenerateKeys_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKeys(resourceGroupName: string, namespaceName:
        string, authorizationRuleName: string, parameters:
        RegenerateAccessKeyParameters, options: { customHeaders?: [key: string]:
        string }, callback: ServiceCallback<AccessKeys>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: authorizationRuleName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.RegenerateAccessKeyParameters" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.AccessKeys" />&gt;
          description: ''
  - name: >-
      regenerateKeysWithHttpOperationResponse(string, string, string,
      RegenerateAccessKeyParameters, { customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.regenerateKeysWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: |-
      Regenerates the primary or secondary connection strings for the specified
      Namespace.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKeysWithHttpOperationResponse(resourceGroupName:
        string, namespaceName: string, authorizationRuleName: string,
        parameters: RegenerateAccessKeyParameters, options?: { customHeaders?:
        [key: string]: string }): Promise<HttpOperationResponse<AccessKeys>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: authorizationRuleName
          type: string
          description: |
            The authorization rule name.
        - id: parameters
          type: <xref uid="azure-arm-eventhub.RegenerateAccessKeyParameters" />
          description: |
            Parameters required to regenerate the connection
            string.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.AccessKeys" />&gt;&gt;
  - name: 'update(string, string, EHNamespace, ServiceCallback<EHNamespace>)'
    uid: azure-arm-eventhub.Namespaces.update_1
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, namespaceName: string,
        parameters: EHNamespace, callback: ServiceCallback<EHNamespace>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
          description: ''
  - name: >-
      update(string, string, EHNamespace, { customHeaders?: [key: string]:
      string })
    uid: azure-arm-eventhub.Namespaces.update
    package: azure-arm-eventhub
    summary: |-
      Creates or updates a namespace. Once created, this namespace's resource
      manifest is immutable. This operation is idempotent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, namespaceName: string,
        parameters: EHNamespace, options?: { customHeaders?: [key: string]:
        string }): Promise<EHNamespace>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: |
            Parameters for updating a namespace resource.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {EHNamespace} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {EHNamespace} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-eventhub.EHNamespace> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
  - name: >-
      update(string, string, EHNamespace, { customHeaders?: [key: string]:
      string }, ServiceCallback<EHNamespace>)
    uid: azure-arm-eventhub.Namespaces.update_2
    package: azure-arm-eventhub
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, namespaceName: string,
        parameters: EHNamespace, options: { customHeaders?: [key: string]:
        string }, callback: ServiceCallback<EHNamespace>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: namespaceName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-eventhub.EHNamespace" />&gt;
          description: ''
  - name: >-
      updateWithHttpOperationResponse(string, string, EHNamespace, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-eventhub.Namespaces.updateWithHttpOperationResponse
    package: azure-arm-eventhub
    summary: |-
      Creates or updates a namespace. Once created, this namespace's resource
      manifest is immutable. This operation is idempotent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateWithHttpOperationResponse(resourceGroupName: string,
        namespaceName: string, parameters: EHNamespace, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<EHNamespace>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            Name of the resource group within the
            azure subscription.
        - id: namespaceName
          type: string
          description: |
            The Namespace name
        - id: parameters
          type: <xref uid="azure-arm-eventhub.EHNamespace" />
          description: |
            Parameters for updating a namespace resource.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-eventhub.EHNamespace" />&gt;&gt;
