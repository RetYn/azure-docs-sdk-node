### YamlMime:TSType
name: BlobContainers
uid: azure-arm-storage.BlobContainers
package: azure-arm-storage
summary: ''
fullName: BlobContainers
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: >-
      clearLegalHold(string, string, string, string[],
      ServiceCallback<LegalHold>)
    uid: azure-arm-storage.BlobContainers.clearLegalHold_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clearLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], callback:
        ServiceCallback<LegalHold>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: tags
          type: 'string[]'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-storage.LegalHold" />&gt;
          description: ''
  - name: >-
      clearLegalHold(string, string, string, string[], { customHeaders?: [key:
      string]: string })
    uid: azure-arm-storage.BlobContainers.clearLegalHold
    package: azure-arm-storage
    summary: >-
      Clears legal hold tags. Clearing the same or non-existent tag results in
      an

      idempotent operation. ClearLegalHold clears out only the specified tags in

      the request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clearLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], options?: { customHeaders?: [key:
        string]: string }): Promise<LegalHold>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: tags
          type: 'string[]'
          description: |
            Each tag should be 3 to 23 alphanumeric characters and
            is normalized to lower case at SRP.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {LegalHold} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {LegalHold} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.LegalHold> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.LegalHold" />&gt;
  - name: >-
      clearLegalHold(string, string, string, string[], { customHeaders?: [key:
      string]: string }, ServiceCallback<LegalHold>)
    uid: azure-arm-storage.BlobContainers.clearLegalHold_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clearLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], options: { customHeaders?: [key:
        string]: string }, callback: ServiceCallback<LegalHold>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: tags
          type: 'string[]'
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-storage.LegalHold" />&gt;
          description: ''
  - name: >-
      clearLegalHoldWithHttpOperationResponse(string, string, string, string[],
      { customHeaders?: [key: string]: string })
    uid: azure-arm-storage.BlobContainers.clearLegalHoldWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Clears legal hold tags. Clearing the same or non-existent tag results in
      an

      idempotent operation. ClearLegalHold clears out only the specified tags in

      the request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clearLegalHoldWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, tags: string[],
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<LegalHold>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: tags
          type: 'string[]'
          description: |
            Each tag should be 3 to 23 alphanumeric characters and
            is normalized to lower case at SRP.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.LegalHold" />&gt;&gt;
  - name: 'create(string, string, string, ServiceCallback<BlobContainer>)'
    uid: azure-arm-storage.BlobContainers.create_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        containerName: string, callback: ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.BlobContainer"
            />&gt;
          description: ''
  - name: >-
      create(string, string, string, { customHeaders?: [key: string]: string,
      metadata?: [key: string]: string, publicAccess?: string })
    uid: azure-arm-storage.BlobContainers.create
    package: azure-arm-storage
    summary: >-
      Creates a new container under the specified account as described by
      request

      body. The container resource includes metadata and properties for that

      container. It does not include a list of the blobs contained by the

      container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        containerName: string, options?: { customHeaders?: [key: string]:
        string, metadata?: [key: string]: string, publicAccess?: string }):
        Promise<BlobContainer>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, metadata?: [key: string]:
            string, publicAccess?: string }
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {BlobContainer} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {BlobContainer} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.BlobContainer> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.BlobContainer" />&gt;
  - name: >-
      create(string, string, string, { customHeaders?: [key: string]: string,
      metadata?: [key: string]: string, publicAccess?: string },
      ServiceCallback<BlobContainer>)
    uid: azure-arm-storage.BlobContainers.create_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        containerName: string, options: { customHeaders?: [key: string]: string,
        metadata?: [key: string]: string, publicAccess?: string }, callback:
        ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, metadata?: [key: string]:
            string, publicAccess?: string }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.BlobContainer"
            />&gt;
          description: ''
  - name: >-
      createOrUpdateImmutabilityPolicy(string, string, string, number,
      ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string,
        immutabilityPeriodSinceCreationInDays: number, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: immutabilityPeriodSinceCreationInDays
          type: number
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      createOrUpdateImmutabilityPolicy(string, string, string, number, {
      customHeaders?: [key: string]: string, ifMatch?: string })
    uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy
    package: azure-arm-storage
    summary: |-
      Creates or updates an unlocked immutability policy. ETag in If-Match is
      honored if given but not required for this operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string,
        immutabilityPeriodSinceCreationInDays: number, options?: {
        customHeaders?: [key: string]: string, ifMatch?: string }):
        Promise<ImmutabilityPolicy>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: immutabilityPeriodSinceCreationInDays
          type: number
          description: >
            The immutability

            period for the blobs in the container since the policy creation, in
            days.
        - id: options
          type: '{ customHeaders?: [key: string]: string, ifMatch?: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ImmutabilityPolicy} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ImmutabilityPolicy} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.ImmutabilityPolicy> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy" />&gt;
  - name: >-
      createOrUpdateImmutabilityPolicy(string, string, string, number, {
      customHeaders?: [key: string]: string, ifMatch?: string },
      ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicy_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdateImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string,
        immutabilityPeriodSinceCreationInDays: number, options: {
        customHeaders?: [key: string]: string, ifMatch?: string }, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: immutabilityPeriodSinceCreationInDays
          type: number
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string, ifMatch?: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      createOrUpdateImmutabilityPolicyWithHttpOperationResponse(string, string,
      string, number, { customHeaders?: [key: string]: string, ifMatch?: string
      })
    uid: >-
      azure-arm-storage.BlobContainers.createOrUpdateImmutabilityPolicyWithHttpOperationResponse
    package: azure-arm-storage
    summary: |-
      Creates or updates an unlocked immutability policy. ETag in If-Match is
      honored if given but not required for this operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        createOrUpdateImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string,
        immutabilityPeriodSinceCreationInDays: number, options?: {
        customHeaders?: [key: string]: string, ifMatch?: string }):
        Promise<HttpOperationResponse<ImmutabilityPolicy>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: immutabilityPeriodSinceCreationInDays
          type: number
          description: >
            The immutability

            period for the blobs in the container since the policy creation, in
            days.
        - id: options
          type: '{ customHeaders?: [key: string]: string, ifMatch?: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.ImmutabilityPolicy" />&gt;&gt;
  - name: >-
      createWithHttpOperationResponse(string, string, string, { customHeaders?:
      [key: string]: string, metadata?: [key: string]: string, publicAccess?:
      string })
    uid: azure-arm-storage.BlobContainers.createWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Creates a new container under the specified account as described by
      request

      body. The container resource includes metadata and properties for that

      container. It does not include a list of the blobs contained by the

      container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, containerName: string, options?: { customHeaders?:
        [key: string]: string, metadata?: [key: string]: string, publicAccess?:
        string }): Promise<HttpOperationResponse<BlobContainer>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, metadata?: [key: string]:
            string, publicAccess?: string }
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.BlobContainer" />&gt;&gt;
  - name: >-
      deleteImmutabilityPolicy(string, string, string, string,
      ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: ifMatch
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      deleteImmutabilityPolicy(string, string, string, string, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy
    package: azure-arm-storage
    summary: >-
      Aborts an unlocked immutability policy. The response of delete has

      immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is
      required

      for this operation. Deleting a locked immutability policy is not allowed,

      only way is to delete the container after deleting all blobs inside the

      container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string, options?: {
        customHeaders?: [key: string]: string }): Promise<ImmutabilityPolicy>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type: string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ImmutabilityPolicy} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ImmutabilityPolicy} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.ImmutabilityPolicy> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy" />&gt;
  - name: >-
      deleteImmutabilityPolicy(string, string, string, string, { customHeaders?:
      [key: string]: string }, ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.deleteImmutabilityPolicy_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: ifMatch
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      deleteImmutabilityPolicyWithHttpOperationResponse(string, string, string,
      string, { customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-storage.BlobContainers.deleteImmutabilityPolicyWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Aborts an unlocked immutability policy. The response of delete has

      immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is
      required

      for this operation. Deleting a locked immutability policy is not allowed,

      only way is to delete the container after deleting all blobs inside the

      container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        deleteImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, ifMatch: string,
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<ImmutabilityPolicy>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type: string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.ImmutabilityPolicy" />&gt;&gt;
  - name: 'deleteMethod(string, string, string, ServiceCallback<void>)'
    uid: azure-arm-storage.BlobContainers.deleteMethod_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        containerName: string, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      deleteMethod(string, string, string, { customHeaders?: [key: string]:
      string })
    uid: azure-arm-storage.BlobContainers.deleteMethod
    package: azure-arm-storage
    summary: Deletes specified container under its account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        containerName: string, options?: { customHeaders?: [key: string]: string
        }): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {null} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;void&gt;
  - name: >-
      deleteMethod(string, string, string, { customHeaders?: [key: string]:
      string }, ServiceCallback<void>)
    uid: azure-arm-storage.BlobContainers.deleteMethod_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        containerName: string, options: { customHeaders?: [key: string]: string
        }, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      deleteMethodWithHttpOperationResponse(string, string, string, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-storage.BlobContainers.deleteMethodWithHttpOperationResponse
    package: azure-arm-storage
    summary: Deletes specified container under its account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: >-
      extendImmutabilityPolicy(string, string, string, string, number,
      ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function extendImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string,
        immutabilityPeriodSinceCreationInDays: number, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: ifMatch
          type: string
          description: ''
        - id: immutabilityPeriodSinceCreationInDays
          type: number
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      extendImmutabilityPolicy(string, string, string, string, number, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy
    package: azure-arm-storage
    summary: >-
      Extends the immutabilityPeriodSinceCreationInDays of a locked

      immutabilityPolicy. The only action allowed on a Locked policy will be
      this

      action. ETag in If-Match is required for this operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function extendImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string,
        immutabilityPeriodSinceCreationInDays: number, options?: {
        customHeaders?: [key: string]: string }): Promise<ImmutabilityPolicy>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type: string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: immutabilityPeriodSinceCreationInDays
          type: number
          description: >
            The immutability

            period for the blobs in the container since the policy creation, in
            days.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ImmutabilityPolicy} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ImmutabilityPolicy} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.ImmutabilityPolicy> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy" />&gt;
  - name: >-
      extendImmutabilityPolicy(string, string, string, string, number, {
      customHeaders?: [key: string]: string },
      ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.extendImmutabilityPolicy_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function extendImmutabilityPolicy(resourceGroupName: string,
        accountName: string, containerName: string, ifMatch: string,
        immutabilityPeriodSinceCreationInDays: number, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: ifMatch
          type: string
          description: ''
        - id: immutabilityPeriodSinceCreationInDays
          type: number
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      extendImmutabilityPolicyWithHttpOperationResponse(string, string, string,
      string, number, { customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-storage.BlobContainers.extendImmutabilityPolicyWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Extends the immutabilityPeriodSinceCreationInDays of a locked

      immutabilityPolicy. The only action allowed on a Locked policy will be
      this

      action. ETag in If-Match is required for this operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        extendImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, ifMatch: string,
        immutabilityPeriodSinceCreationInDays: number, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<ImmutabilityPolicy>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type: string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: immutabilityPeriodSinceCreationInDays
          type: number
          description: >
            The immutability

            period for the blobs in the container since the policy creation, in
            days.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.ImmutabilityPolicy" />&gt;&gt;
  - name: 'get(string, string, string, ServiceCallback<BlobContainer>)'
    uid: azure-arm-storage.BlobContainers.get_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, accountName: string,
        containerName: string, callback: ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.BlobContainer"
            />&gt;
          description: ''
  - name: 'get(string, string, string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.BlobContainers.get
    package: azure-arm-storage
    summary: Gets properties of a specified container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, accountName: string,
        containerName: string, options?: { customHeaders?: [key: string]: string
        }): Promise<BlobContainer>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {BlobContainer} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {BlobContainer} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.BlobContainer> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.BlobContainer" />&gt;
  - name: >-
      get(string, string, string, { customHeaders?: [key: string]: string },
      ServiceCallback<BlobContainer>)
    uid: azure-arm-storage.BlobContainers.get_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, accountName: string,
        containerName: string, options: { customHeaders?: [key: string]: string
        }, callback: ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.BlobContainer"
            />&gt;
          description: ''
  - name: >-
      getImmutabilityPolicy(string, string, string,
      ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      getImmutabilityPolicy(string, string, string, { customHeaders?: [key:
      string]: string, ifMatch?: string })
    uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy
    package: azure-arm-storage
    summary: |-
      Gets the existing immutability policy along with the corresponding ETag in
      response headers and body.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, options?: { customHeaders?: [key:
        string]: string, ifMatch?: string }): Promise<ImmutabilityPolicy>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: '{ customHeaders?: [key: string]: string, ifMatch?: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ImmutabilityPolicy} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ImmutabilityPolicy} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.ImmutabilityPolicy> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy" />&gt;
  - name: >-
      getImmutabilityPolicy(string, string, string, { customHeaders?: [key:
      string]: string, ifMatch?: string }, ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.getImmutabilityPolicy_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, options: { customHeaders?: [key: string]:
        string, ifMatch?: string }, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string, ifMatch?: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      getImmutabilityPolicyWithHttpOperationResponse(string, string, string, {
      customHeaders?: [key: string]: string, ifMatch?: string })
    uid: >-
      azure-arm-storage.BlobContainers.getImmutabilityPolicyWithHttpOperationResponse
    package: azure-arm-storage
    summary: |-
      Gets the existing immutability policy along with the corresponding ETag in
      response headers and body.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        getImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, options?: {
        customHeaders?: [key: string]: string, ifMatch?: string }):
        Promise<HttpOperationResponse<ImmutabilityPolicy>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: '{ customHeaders?: [key: string]: string, ifMatch?: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.ImmutabilityPolicy" />&gt;&gt;
  - name: >-
      getWithHttpOperationResponse(string, string, string, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.BlobContainers.getWithHttpOperationResponse
    package: azure-arm-storage
    summary: Gets properties of a specified container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, containerName: string, options?: { customHeaders?:
        [key: string]: string }): Promise<HttpOperationResponse<BlobContainer>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.BlobContainer" />&gt;&gt;
  - name: 'lease(string, string, string, ServiceCallback<LeaseContainerResponse>)'
    uid: azure-arm-storage.BlobContainers.lease_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function lease(resourceGroupName: string, accountName: string,
        containerName: string, callback:
        ServiceCallback<LeaseContainerResponse>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.LeaseContainerResponse" />&gt;
          description: ''
  - name: >-
      lease(string, string, string, { customHeaders?: [key: string]: string,
      parameters?: LeaseContainerRequest })
    uid: azure-arm-storage.BlobContainers.lease
    package: azure-arm-storage
    summary: >-
      The Lease Container operation establishes and manages a lock on a
      container

      for delete operations. The lock duration can be 15 to 60 seconds, or can
      be

      infinite.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function lease(resourceGroupName: string, accountName: string,
        containerName: string, options?: { customHeaders?: [key: string]:
        string, parameters?: LeaseContainerRequest }):
        Promise<LeaseContainerResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, parameters?:
            LeaseContainerRequest }
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {LeaseContainerResponse} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {LeaseContainerResponse} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.LeaseContainerResponse> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.LeaseContainerResponse" />&gt;
  - name: >-
      lease(string, string, string, { customHeaders?: [key: string]: string,
      parameters?: LeaseContainerRequest },
      ServiceCallback<LeaseContainerResponse>)
    uid: azure-arm-storage.BlobContainers.lease_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function lease(resourceGroupName: string, accountName: string,
        containerName: string, options: { customHeaders?: [key: string]: string,
        parameters?: LeaseContainerRequest }, callback:
        ServiceCallback<LeaseContainerResponse>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, parameters?:
            LeaseContainerRequest }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.LeaseContainerResponse" />&gt;
          description: ''
  - name: >-
      leaseWithHttpOperationResponse(string, string, string, { customHeaders?:
      [key: string]: string, parameters?: LeaseContainerRequest })
    uid: azure-arm-storage.BlobContainers.leaseWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      The Lease Container operation establishes and manages a lock on a
      container

      for delete operations. The lock duration can be 15 to 60 seconds, or can
      be

      infinite.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function leaseWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, containerName: string, options?: { customHeaders?:
        [key: string]: string, parameters?: LeaseContainerRequest }):
        Promise<HttpOperationResponse<LeaseContainerResponse>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, parameters?:
            LeaseContainerRequest }
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.LeaseContainerResponse" />&gt;&gt;
  - name: 'list(string, string, ServiceCallback<ListContainerItems>)'
    uid: azure-arm-storage.BlobContainers.list_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(resourceGroupName: string, accountName: string, callback:
        ServiceCallback<ListContainerItems>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ListContainerItems"
            />&gt;
          description: ''
  - name: 'list(string, string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.BlobContainers.list
    package: azure-arm-storage
    summary: >-
      Lists all containers and does not support a prefix like data plane. Also
      SRP

      today does not return continuation token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(resourceGroupName: string, accountName: string, options?:
        { customHeaders?: [key: string]: string }): Promise<ListContainerItems>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ListContainerItems} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ListContainerItems} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.ListContainerItems> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.ListContainerItems" />&gt;
  - name: >-
      list(string, string, { customHeaders?: [key: string]: string },
      ServiceCallback<ListContainerItems>)
    uid: azure-arm-storage.BlobContainers.list_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(resourceGroupName: string, accountName: string, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<ListContainerItems>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ListContainerItems"
            />&gt;
          description: ''
  - name: >-
      listWithHttpOperationResponse(string, string, { customHeaders?: [key:
      string]: string })
    uid: azure-arm-storage.BlobContainers.listWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Lists all containers and does not support a prefix like data plane. Also
      SRP

      today does not return continuation token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, options?: { customHeaders?: [key: string]: string
        }): Promise<HttpOperationResponse<ListContainerItems>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.ListContainerItems" />&gt;&gt;
  - name: >-
      lockImmutabilityPolicy(string, string, string, string,
      ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function lockImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, ifMatch: string, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: ifMatch
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      lockImmutabilityPolicy(string, string, string, string, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy
    package: azure-arm-storage
    summary: |-
      Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
      Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
      required for this operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function lockImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, ifMatch: string, options?: {
        customHeaders?: [key: string]: string }): Promise<ImmutabilityPolicy>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type: string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ImmutabilityPolicy} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ImmutabilityPolicy} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.ImmutabilityPolicy> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy" />&gt;
  - name: >-
      lockImmutabilityPolicy(string, string, string, string, { customHeaders?:
      [key: string]: string }, ServiceCallback<ImmutabilityPolicy>)
    uid: azure-arm-storage.BlobContainers.lockImmutabilityPolicy_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function lockImmutabilityPolicy(resourceGroupName: string, accountName:
        string, containerName: string, ifMatch: string, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<ImmutabilityPolicy>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: ifMatch
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.ImmutabilityPolicy"
            />&gt;
          description: ''
  - name: >-
      lockImmutabilityPolicyWithHttpOperationResponse(string, string, string,
      string, { customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-storage.BlobContainers.lockImmutabilityPolicyWithHttpOperationResponse
    package: azure-arm-storage
    summary: |-
      Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
      Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
      required for this operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        lockImmutabilityPolicyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, ifMatch: string,
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<ImmutabilityPolicy>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: ifMatch
          type: string
          description: >
            The entity state (ETag) version of the immutability

            policy to update. A value of "*" can be used to apply the operation
            only if

            the immutability policy already exists. If omitted, this operation
            will

            always be applied.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.ImmutabilityPolicy" />&gt;&gt;
  - name: 'setLegalHold(string, string, string, string[], ServiceCallback<LegalHold>)'
    uid: azure-arm-storage.BlobContainers.setLegalHold_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], callback:
        ServiceCallback<LegalHold>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: tags
          type: 'string[]'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-storage.LegalHold" />&gt;
          description: ''
  - name: >-
      setLegalHold(string, string, string, string[], { customHeaders?: [key:
      string]: string })
    uid: azure-arm-storage.BlobContainers.setLegalHold
    package: azure-arm-storage
    summary: >-
      Sets legal hold tags. Setting the same tag results in an idempotent

      operation. SetLegalHold follows an append pattern and does not clear out
      the

      existing tags that are not specified in the request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], options?: { customHeaders?: [key:
        string]: string }): Promise<LegalHold>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: tags
          type: 'string[]'
          description: |
            Each tag should be 3 to 23 alphanumeric characters and
            is normalized to lower case at SRP.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {LegalHold} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {LegalHold} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.LegalHold> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.LegalHold" />&gt;
  - name: >-
      setLegalHold(string, string, string, string[], { customHeaders?: [key:
      string]: string }, ServiceCallback<LegalHold>)
    uid: azure-arm-storage.BlobContainers.setLegalHold_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setLegalHold(resourceGroupName: string, accountName: string,
        containerName: string, tags: string[], options: { customHeaders?: [key:
        string]: string }, callback: ServiceCallback<LegalHold>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: tags
          type: 'string[]'
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;<xref uid="azure-arm-storage.LegalHold" />&gt;
          description: ''
  - name: >-
      setLegalHoldWithHttpOperationResponse(string, string, string, string[], {
      customHeaders?: [key: string]: string })
    uid: azure-arm-storage.BlobContainers.setLegalHoldWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Sets legal hold tags. Setting the same tag results in an idempotent

      operation. SetLegalHold follows an append pattern and does not clear out
      the

      existing tags that are not specified in the request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setLegalHoldWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, containerName: string, tags: string[],
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<LegalHold>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: tags
          type: 'string[]'
          description: |
            Each tag should be 3 to 23 alphanumeric characters and
            is normalized to lower case at SRP.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.LegalHold" />&gt;&gt;
  - name: 'update(string, string, string, ServiceCallback<BlobContainer>)'
    uid: azure-arm-storage.BlobContainers.update_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        containerName: string, callback: ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.BlobContainer"
            />&gt;
          description: ''
  - name: >-
      update(string, string, string, { customHeaders?: [key: string]: string,
      metadata?: [key: string]: string, publicAccess?: string })
    uid: azure-arm-storage.BlobContainers.update
    package: azure-arm-storage
    summary: |-
      Updates container properties as specified in request body. Properties not
      mentioned in the request will be unchanged. Update fails if the specified
      container doesn't already exist.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        containerName: string, options?: { customHeaders?: [key: string]:
        string, metadata?: [key: string]: string, publicAccess?: string }):
        Promise<BlobContainer>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, metadata?: [key: string]:
            string, publicAccess?: string }
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {BlobContainer} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {BlobContainer} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.BlobContainer> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.BlobContainer" />&gt;
  - name: >-
      update(string, string, string, { customHeaders?: [key: string]: string,
      metadata?: [key: string]: string, publicAccess?: string },
      ServiceCallback<BlobContainer>)
    uid: azure-arm-storage.BlobContainers.update_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        containerName: string, options: { customHeaders?: [key: string]: string,
        metadata?: [key: string]: string, publicAccess?: string }, callback:
        ServiceCallback<BlobContainer>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: containerName
          type: string
          description: ''
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, metadata?: [key: string]:
            string, publicAccess?: string }
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.BlobContainer"
            />&gt;
          description: ''
  - name: >-
      updateWithHttpOperationResponse(string, string, string, { customHeaders?:
      [key: string]: string, metadata?: [key: string]: string, publicAccess?:
      string })
    uid: azure-arm-storage.BlobContainers.updateWithHttpOperationResponse
    package: azure-arm-storage
    summary: |-
      Updates container properties as specified in request body. Properties not
      mentioned in the request will be unchanged. Update fails if the specified
      container doesn't already exist.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, containerName: string, options?: { customHeaders?:
        [key: string]: string, metadata?: [key: string]: string, publicAccess?:
        string }): Promise<HttpOperationResponse<BlobContainer>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: containerName
          type: string
          description: >
            The name of the blob container within the

            specified storage account. Blob container names must be between 3
            and 63

            characters in length and use numbers, lower-case letters and dash
            (-) only.

            Every dash (-) character must be immediately preceded and followed
            by a

            letter or number.
        - id: options
          type: >-
            { customHeaders?: [key: string]: string, metadata?: [key: string]:
            string, publicAccess?: string }
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.BlobContainer" />&gt;&gt;
