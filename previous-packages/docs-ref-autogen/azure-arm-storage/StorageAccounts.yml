### YamlMime:TSType
name: StorageAccounts
uid: azure-arm-storage.StorageAccounts
package: azure-arm-storage
summary: ''
fullName: StorageAccounts
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: >-
      beginCreate(string, string, StorageAccountCreateParameters,
      ServiceCallback<StorageAccount>)
    uid: azure-arm-storage.StorageAccounts.beginCreate_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreate(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountCreateParameters" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.StorageAccount"
            />&gt;
          description: ''
  - name: >-
      beginCreate(string, string, StorageAccountCreateParameters, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.beginCreate
    package: azure-arm-storage
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreate(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, options?: { customHeaders?:
        [key: string]: string }): Promise<StorageAccount>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountCreateParameters" />
          description: |
            The parameters to provide for the created
            account.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {StorageAccount} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {StorageAccount} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.StorageAccount> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.StorageAccount" />&gt;
  - name: >-
      beginCreate(string, string, StorageAccountCreateParameters, {
      customHeaders?: [key: string]: string }, ServiceCallback<StorageAccount>)
    uid: azure-arm-storage.StorageAccounts.beginCreate_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreate(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, options: { customHeaders?:
        [key: string]: string }, callback: ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountCreateParameters" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.StorageAccount"
            />&gt;
          description: ''
  - name: >-
      beginCreateWithHttpOperationResponse(string, string,
      StorageAccountCreateParameters, { customHeaders?: [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.beginCreateWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, parameters: StorageAccountCreateParameters,
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<StorageAccount>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountCreateParameters" />
          description: |
            The parameters to provide for the created
            account.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.StorageAccount" />&gt;&gt;
  - name: 'beginFailover(string, string, ServiceCallback<void>)'
    uid: azure-arm-storage.StorageAccounts.beginFailover_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginFailover(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: 'beginFailover(string, string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.StorageAccounts.beginFailover
    package: azure-arm-storage
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginFailover(resourceGroupName: string, accountName: string,
        options?: { customHeaders?: [key: string]: string }): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {null} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;void&gt;
  - name: >-
      beginFailover(string, string, { customHeaders?: [key: string]: string },
      ServiceCallback<void>)
    uid: azure-arm-storage.StorageAccounts.beginFailover_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginFailover(resourceGroupName: string, accountName: string,
        options: { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      beginFailoverWithHttpOperationResponse(string, string, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.beginFailoverWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginFailoverWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, options?: { customHeaders?: [key: string]:
        string }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: >-
      checkNameAvailability(string,
      ServiceCallback<CheckNameAvailabilityResult>)
    uid: azure-arm-storage.StorageAccounts.checkNameAvailability_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(name: string, callback:
        ServiceCallback<CheckNameAvailabilityResult>)
      parameters:
        - id: name
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.CheckNameAvailabilityResult" />&gt;
          description: ''
  - name: 'checkNameAvailability(string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.StorageAccounts.checkNameAvailability
    package: azure-arm-storage
    summary: Checks that the storage account name is valid and is not already in use.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(name: string, options?: { customHeaders?:
        [key: string]: string }): Promise<CheckNameAvailabilityResult>
      parameters:
        - id: name
          type: string
          description: |
            The storage account name.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {CheckNameAvailabilityResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {CheckNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.CheckNameAvailabilityResult> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: >-
          Promise&lt;<xref uid="azure-arm-storage.CheckNameAvailabilityResult"
          />&gt;
  - name: >-
      checkNameAvailability(string, { customHeaders?: [key: string]: string },
      ServiceCallback<CheckNameAvailabilityResult>)
    uid: azure-arm-storage.StorageAccounts.checkNameAvailability_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailability(name: string, options: { customHeaders?:
        [key: string]: string }, callback:
        ServiceCallback<CheckNameAvailabilityResult>)
      parameters:
        - id: name
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.CheckNameAvailabilityResult" />&gt;
          description: ''
  - name: >-
      checkNameAvailabilityWithHttpOperationResponse(string, { customHeaders?:
      [key: string]: string })
    uid: >-
      azure-arm-storage.StorageAccounts.checkNameAvailabilityWithHttpOperationResponse
    package: azure-arm-storage
    summary: Checks that the storage account name is valid and is not already in use.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function checkNameAvailabilityWithHttpOperationResponse(name: string,
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<CheckNameAvailabilityResult>>
      parameters:
        - id: name
          type: string
          description: |
            The storage account name.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.CheckNameAvailabilityResult" />&gt;&gt;
  - name: >-
      create(string, string, StorageAccountCreateParameters,
      ServiceCallback<StorageAccount>)
    uid: azure-arm-storage.StorageAccounts.create_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountCreateParameters" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.StorageAccount"
            />&gt;
          description: ''
  - name: >-
      create(string, string, StorageAccountCreateParameters, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.create
    package: azure-arm-storage
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, options?: { customHeaders?:
        [key: string]: string }): Promise<StorageAccount>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountCreateParameters" />
          description: |
            The parameters to provide for the created
            account.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {StorageAccount} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {StorageAccount} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.StorageAccount> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.StorageAccount" />&gt;
  - name: >-
      create(string, string, StorageAccountCreateParameters, { customHeaders?:
      [key: string]: string }, ServiceCallback<StorageAccount>)
    uid: azure-arm-storage.StorageAccounts.create_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(resourceGroupName: string, accountName: string,
        parameters: StorageAccountCreateParameters, options: { customHeaders?:
        [key: string]: string }, callback: ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountCreateParameters" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.StorageAccount"
            />&gt;
          description: ''
  - name: >-
      createWithHttpOperationResponse(string, string,
      StorageAccountCreateParameters, { customHeaders?: [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.createWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Asynchronously creates a new storage account with the specified
      parameters.

      If an account is already created and a subsequent create request is issued

      with different properties, the account properties will be updated. If an

      account is already created and a subsequent create or update request is

      issued with the exact same set of properties, the request will succeed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, parameters: StorageAccountCreateParameters,
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<StorageAccount>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountCreateParameters" />
          description: |
            The parameters to provide for the created
            account.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.StorageAccount" />&gt;&gt;
  - name: 'deleteMethod(string, string, ServiceCallback<void>)'
    uid: azure-arm-storage.StorageAccounts.deleteMethod_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: 'deleteMethod(string, string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.StorageAccounts.deleteMethod
    package: azure-arm-storage
    summary: Deletes a storage account in Microsoft Azure.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        options?: { customHeaders?: [key: string]: string }): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {null} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;void&gt;
  - name: >-
      deleteMethod(string, string, { customHeaders?: [key: string]: string },
      ServiceCallback<void>)
    uid: azure-arm-storage.StorageAccounts.deleteMethod_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, accountName: string,
        options: { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      deleteMethodWithHttpOperationResponse(string, string, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.deleteMethodWithHttpOperationResponse
    package: azure-arm-storage
    summary: Deletes a storage account in Microsoft Azure.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethodWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, options?: { customHeaders?: [key: string]:
        string }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: 'failover(string, string, ServiceCallback<void>)'
    uid: azure-arm-storage.StorageAccounts.failover_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function failover(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: 'failover(string, string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.StorageAccounts.failover
    package: azure-arm-storage
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function failover(resourceGroupName: string, accountName: string,
        options?: { customHeaders?: [key: string]: string }): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {null} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;void&gt;
  - name: >-
      failover(string, string, { customHeaders?: [key: string]: string },
      ServiceCallback<void>)
    uid: azure-arm-storage.StorageAccounts.failover_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function failover(resourceGroupName: string, accountName: string,
        options: { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      failoverWithHttpOperationResponse(string, string, { customHeaders?: [key:
      string]: string })
    uid: azure-arm-storage.StorageAccounts.failoverWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      Failover request can be triggered for a storage account in case of

      availability issues. The failover occurs from the storage account's
      primary

      cluster to secondary cluster for RA-GRS accounts. The secondary cluster
      will

      become primary after failover.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function failoverWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, options?: { customHeaders?: [key: string]: string
        }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: 'getProperties(string, string, ServiceCallback<StorageAccount>)'
    uid: azure-arm-storage.StorageAccounts.getProperties_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.StorageAccount"
            />&gt;
          description: ''
  - name: >-
      getProperties(string, string, { customHeaders?: [key: string]: string,
      expand?: string })
    uid: azure-arm-storage.StorageAccounts.getProperties
    package: azure-arm-storage
    summary: |-
      Returns the properties for the specified storage account including but not
      limited to name, SKU name, location, and account status. The ListKeys
      operation should be used to retrieve storage keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(resourceGroupName: string, accountName: string,
        options?: { customHeaders?: [key: string]: string, expand?: string }):
        Promise<StorageAccount>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string, expand?: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {StorageAccount} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {StorageAccount} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.StorageAccount> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.StorageAccount" />&gt;
  - name: >-
      getProperties(string, string, { customHeaders?: [key: string]: string,
      expand?: string }, ServiceCallback<StorageAccount>)
    uid: azure-arm-storage.StorageAccounts.getProperties_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(resourceGroupName: string, accountName: string,
        options: { customHeaders?: [key: string]: string, expand?: string },
        callback: ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string, expand?: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.StorageAccount"
            />&gt;
          description: ''
  - name: >-
      getPropertiesWithHttpOperationResponse(string, string, { customHeaders?:
      [key: string]: string, expand?: string })
    uid: azure-arm-storage.StorageAccounts.getPropertiesWithHttpOperationResponse
    package: azure-arm-storage
    summary: |-
      Returns the properties for the specified storage account including but not
      limited to name, SKU name, location, and account status. The ListKeys
      operation should be used to retrieve storage keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPropertiesWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, options?: { customHeaders?: [key: string]:
        string, expand?: string }):
        Promise<HttpOperationResponse<StorageAccount>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string, expand?: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.StorageAccount" />&gt;&gt;
  - name: list(ServiceCallback<StorageAccountListResult>)
    uid: azure-arm-storage.StorageAccounts.list_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function list(callback: ServiceCallback<StorageAccountListResult>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.StorageAccountListResult" />&gt;
          description: ''
  - name: 'list({ customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.StorageAccounts.list
    package: azure-arm-storage
    summary: |-
      Lists all the storage accounts available under the subscription. Note that
      storage keys are not returned; use the ListKeys operation for this.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(options?: { customHeaders?: [key: string]: string }):
        Promise<StorageAccountListResult>
      parameters:
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {StorageAccountListResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {StorageAccountListResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.StorageAccountListResult> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: >-
          Promise&lt;<xref uid="azure-arm-storage.StorageAccountListResult"
          />&gt;
  - name: >-
      list({ customHeaders?: [key: string]: string },
      ServiceCallback<StorageAccountListResult>)
    uid: azure-arm-storage.StorageAccounts.list_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function list(options: { customHeaders?: [key: string]: string },
        callback: ServiceCallback<StorageAccountListResult>)
      parameters:
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.StorageAccountListResult" />&gt;
          description: ''
  - name: >-
      listAccountSAS(string, string, AccountSasParameters,
      ServiceCallback<ListAccountSasResponse>)
    uid: azure-arm-storage.StorageAccounts.listAccountSAS_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAccountSAS(resourceGroupName: string, accountName: string,
        parameters: AccountSasParameters, callback:
        ServiceCallback<ListAccountSasResponse>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.AccountSasParameters" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.ListAccountSasResponse" />&gt;
          description: ''
  - name: >-
      listAccountSAS(string, string, AccountSasParameters, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.listAccountSAS
    package: azure-arm-storage
    summary: List SAS credentials of a storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAccountSAS(resourceGroupName: string, accountName: string,
        parameters: AccountSasParameters, options?: { customHeaders?: [key:
        string]: string }): Promise<ListAccountSasResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.AccountSasParameters" />
          description: |
            The parameters to provide to list SAS credentials
            for the storage account.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ListAccountSasResponse} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ListAccountSasResponse} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.ListAccountSasResponse> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.ListAccountSasResponse" />&gt;
  - name: >-
      listAccountSAS(string, string, AccountSasParameters, { customHeaders?:
      [key: string]: string }, ServiceCallback<ListAccountSasResponse>)
    uid: azure-arm-storage.StorageAccounts.listAccountSAS_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAccountSAS(resourceGroupName: string, accountName: string,
        parameters: AccountSasParameters, options: { customHeaders?: [key:
        string]: string }, callback: ServiceCallback<ListAccountSasResponse>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.AccountSasParameters" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.ListAccountSasResponse" />&gt;
          description: ''
  - name: >-
      listAccountSASWithHttpOperationResponse(string, string,
      AccountSasParameters, { customHeaders?: [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.listAccountSASWithHttpOperationResponse
    package: azure-arm-storage
    summary: List SAS credentials of a storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listAccountSASWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, parameters: AccountSasParameters, options?:
        { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<ListAccountSasResponse>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.AccountSasParameters" />
          description: |
            The parameters to provide to list SAS credentials
            for the storage account.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.ListAccountSasResponse" />&gt;&gt;
  - name: 'listByResourceGroup(string, ServiceCallback<StorageAccountListResult>)'
    uid: azure-arm-storage.StorageAccounts.listByResourceGroup_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<StorageAccountListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.StorageAccountListResult" />&gt;
          description: ''
  - name: 'listByResourceGroup(string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.StorageAccounts.listByResourceGroup
    package: azure-arm-storage
    summary: |-
      Lists all the storage accounts available under the given resource group.
      Note that storage keys are not returned; use the ListKeys operation for
      this.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?: {
        customHeaders?: [key: string]: string }):
        Promise<StorageAccountListResult>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {StorageAccountListResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {StorageAccountListResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.StorageAccountListResult> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: >-
          Promise&lt;<xref uid="azure-arm-storage.StorageAccountListResult"
          />&gt;
  - name: >-
      listByResourceGroup(string, { customHeaders?: [key: string]: string },
      ServiceCallback<StorageAccountListResult>)
    uid: azure-arm-storage.StorageAccounts.listByResourceGroup_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options: {
        customHeaders?: [key: string]: string }, callback:
        ServiceCallback<StorageAccountListResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.StorageAccountListResult" />&gt;
          description: ''
  - name: >-
      listByResourceGroupWithHttpOperationResponse(string, { customHeaders?:
      [key: string]: string })
    uid: >-
      azure-arm-storage.StorageAccounts.listByResourceGroupWithHttpOperationResponse
    package: azure-arm-storage
    summary: |-
      Lists all the storage accounts available under the given resource group.
      Note that storage keys are not returned; use the ListKeys operation for
      this.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroupWithHttpOperationResponse(resourceGroupName:
        string, options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<StorageAccountListResult>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.StorageAccountListResult" />&gt;&gt;
  - name: 'listKeys(string, string, ServiceCallback<StorageAccountListKeysResult>)'
    uid: azure-arm-storage.StorageAccounts.listKeys_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, accountName: string,
        callback: ServiceCallback<StorageAccountListKeysResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.StorageAccountListKeysResult" />&gt;
          description: ''
  - name: 'listKeys(string, string, { customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.StorageAccounts.listKeys
    package: azure-arm-storage
    summary: Lists the access keys for the specified storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, accountName: string,
        options?: { customHeaders?: [key: string]: string }):
        Promise<StorageAccountListKeysResult>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {StorageAccountListKeysResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {StorageAccountListKeysResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.StorageAccountListKeysResult> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: >-
          Promise&lt;<xref uid="azure-arm-storage.StorageAccountListKeysResult"
          />&gt;
  - name: >-
      listKeys(string, string, { customHeaders?: [key: string]: string },
      ServiceCallback<StorageAccountListKeysResult>)
    uid: azure-arm-storage.StorageAccounts.listKeys_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeys(resourceGroupName: string, accountName: string,
        options: { customHeaders?: [key: string]: string }, callback:
        ServiceCallback<StorageAccountListKeysResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.StorageAccountListKeysResult" />&gt;
          description: ''
  - name: >-
      listKeysWithHttpOperationResponse(string, string, { customHeaders?: [key:
      string]: string })
    uid: azure-arm-storage.StorageAccounts.listKeysWithHttpOperationResponse
    package: azure-arm-storage
    summary: Lists the access keys for the specified storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listKeysWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, options?: { customHeaders?: [key: string]: string
        }): Promise<HttpOperationResponse<StorageAccountListKeysResult>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.StorageAccountListKeysResult" />&gt;&gt;
  - name: >-
      listServiceSAS(string, string, ServiceSasParameters,
      ServiceCallback<ListServiceSasResponse>)
    uid: azure-arm-storage.StorageAccounts.listServiceSAS_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listServiceSAS(resourceGroupName: string, accountName: string,
        parameters: ServiceSasParameters, callback:
        ServiceCallback<ListServiceSasResponse>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.ServiceSasParameters" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.ListServiceSasResponse" />&gt;
          description: ''
  - name: >-
      listServiceSAS(string, string, ServiceSasParameters, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.listServiceSAS
    package: azure-arm-storage
    summary: List service SAS credentials of a specific resource.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listServiceSAS(resourceGroupName: string, accountName: string,
        parameters: ServiceSasParameters, options?: { customHeaders?: [key:
        string]: string }): Promise<ListServiceSasResponse>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.ServiceSasParameters" />
          description: |
            The parameters to provide to list service SAS
            credentials.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {ListServiceSasResponse} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {ListServiceSasResponse} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.ListServiceSasResponse> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.ListServiceSasResponse" />&gt;
  - name: >-
      listServiceSAS(string, string, ServiceSasParameters, { customHeaders?:
      [key: string]: string }, ServiceCallback<ListServiceSasResponse>)
    uid: azure-arm-storage.StorageAccounts.listServiceSAS_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listServiceSAS(resourceGroupName: string, accountName: string,
        parameters: ServiceSasParameters, options: { customHeaders?: [key:
        string]: string }, callback: ServiceCallback<ListServiceSasResponse>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.ServiceSasParameters" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.ListServiceSasResponse" />&gt;
          description: ''
  - name: >-
      listServiceSASWithHttpOperationResponse(string, string,
      ServiceSasParameters, { customHeaders?: [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.listServiceSASWithHttpOperationResponse
    package: azure-arm-storage
    summary: List service SAS credentials of a specific resource.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listServiceSASWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, parameters: ServiceSasParameters, options?:
        { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<ListServiceSasResponse>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.ServiceSasParameters" />
          description: |
            The parameters to provide to list service SAS
            credentials.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.ListServiceSasResponse" />&gt;&gt;
  - name: 'listWithHttpOperationResponse({ customHeaders?: [key: string]: string })'
    uid: azure-arm-storage.StorageAccounts.listWithHttpOperationResponse
    package: azure-arm-storage
    summary: |-
      Lists all the storage accounts available under the subscription. Note that
      storage keys are not returned; use the ListKeys operation for this.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listWithHttpOperationResponse(options?: { customHeaders?: [key:
        string]: string }):
        Promise<HttpOperationResponse<StorageAccountListResult>>
      parameters:
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.StorageAccountListResult" />&gt;&gt;
  - name: >-
      regenerateKey(string, string, string,
      ServiceCallback<StorageAccountListKeysResult>)
    uid: azure-arm-storage.StorageAccounts.regenerateKey_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKey(resourceGroupName: string, accountName: string,
        keyName: string, callback:
        ServiceCallback<StorageAccountListKeysResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.StorageAccountListKeysResult" />&gt;
          description: ''
  - name: >-
      regenerateKey(string, string, string, { customHeaders?: [key: string]:
      string })
    uid: azure-arm-storage.StorageAccounts.regenerateKey
    package: azure-arm-storage
    summary: Regenerates one of the access keys for the specified storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKey(resourceGroupName: string, accountName: string,
        keyName: string, options?: { customHeaders?: [key: string]: string }):
        Promise<StorageAccountListKeysResult>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: keyName
          type: string
          description: |
            The name of storage keys that want to be
            regenerated, possible values are key1, key2.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {StorageAccountListKeysResult} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {StorageAccountListKeysResult} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.StorageAccountListKeysResult> for more
                               information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: >-
          Promise&lt;<xref uid="azure-arm-storage.StorageAccountListKeysResult"
          />&gt;
  - name: >-
      regenerateKey(string, string, string, { customHeaders?: [key: string]:
      string }, ServiceCallback<StorageAccountListKeysResult>)
    uid: azure-arm-storage.StorageAccounts.regenerateKey_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKey(resourceGroupName: string, accountName: string,
        keyName: string, options: { customHeaders?: [key: string]: string },
        callback: ServiceCallback<StorageAccountListKeysResult>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: keyName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="azure-arm-storage.StorageAccountListKeysResult" />&gt;
          description: ''
  - name: >-
      regenerateKeyWithHttpOperationResponse(string, string, string, {
      customHeaders?: [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.regenerateKeyWithHttpOperationResponse
    package: azure-arm-storage
    summary: Regenerates one of the access keys for the specified storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function regenerateKeyWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, keyName: string, options?: {
        customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<StorageAccountListKeysResult>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: keyName
          type: string
          description: |
            The name of storage keys that want to be
            regenerated, possible values are key1, key2.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.StorageAccountListKeysResult" />&gt;&gt;
  - name: 'revokeUserDelegationKeys(string, string, ServiceCallback<void>)'
    uid: azure-arm-storage.StorageAccounts.revokeUserDelegationKeys_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function revokeUserDelegationKeys(resourceGroupName: string,
        accountName: string, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      revokeUserDelegationKeys(string, string, { customHeaders?: [key: string]:
      string })
    uid: azure-arm-storage.StorageAccounts.revokeUserDelegationKeys
    package: azure-arm-storage
    summary: Revoke user delegation keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function revokeUserDelegationKeys(resourceGroupName: string,
        accountName: string, options?: { customHeaders?: [key: string]: string
        }): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {null} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {null} [result]   - The deserialized result object if an error did not occur.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;void&gt;
  - name: >-
      revokeUserDelegationKeys(string, string, { customHeaders?: [key: string]:
      string }, ServiceCallback<void>)
    uid: azure-arm-storage.StorageAccounts.revokeUserDelegationKeys_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function revokeUserDelegationKeys(resourceGroupName: string,
        accountName: string, options: { customHeaders?: [key: string]: string },
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: ''
  - name: >-
      revokeUserDelegationKeysWithHttpOperationResponse(string, string, {
      customHeaders?: [key: string]: string })
    uid: >-
      azure-arm-storage.StorageAccounts.revokeUserDelegationKeysWithHttpOperationResponse
    package: azure-arm-storage
    summary: Revoke user delegation keys.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function
        revokeUserDelegationKeysWithHttpOperationResponse(resourceGroupName:
        string, accountName: string, options?: { customHeaders?: [key: string]:
        string }): Promise<HttpOperationResponse<void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: Promise&lt;HttpOperationResponse&lt;void&gt;&gt;
  - name: >-
      update(string, string, StorageAccountUpdateParameters,
      ServiceCallback<StorageAccount>)
    uid: azure-arm-storage.StorageAccounts.update_1
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        parameters: StorageAccountUpdateParameters, callback:
        ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountUpdateParameters" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.StorageAccount"
            />&gt;
          description: ''
  - name: >-
      update(string, string, StorageAccountUpdateParameters, { customHeaders?:
      [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.update
    package: azure-arm-storage
    summary: >-
      The update operation can be used to update the SKU, encryption, access
      tier,

      or tags for a storage account. It can also be used to map the account to a

      custom domain. Only one custom domain is supported per storage account;
      the

      replacement/change of custom domain is not supported. In order to replace
      an

      old custom domain, the old value must be cleared/unregistered before a new

      value can be set. The update of multiple properties is supported. This
      call

      does not change the storage keys for the account. If you want to change
      the

      storage account keys, use the regenerate keys operation. The location and

      name of the storage account cannot be changed after creation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        parameters: StorageAccountUpdateParameters, options?: { customHeaders?:
        [key: string]: string }): Promise<StorageAccount>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountUpdateParameters" />
          description: |
            The parameters to provide for the updated
            account.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: |-
          If a callback was passed as the last
          parameter then it returns the callback else returns a Promise.

          {Promise} A promise is returned.

                               @resolve {StorageAccount} - The deserialized result object.

                               @reject {Error|ServiceError} - The error object.

          {ServiceCallback} optionalCallback(err, result, request, response)

                               {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.

                               {StorageAccount} [result]   - The deserialized result object if an error did not occur.
                               See <xref:azure-arm-storage.StorageAccount> for more information.

                               {WebResource} [request]  - The HTTP Request object if an error did not occur.

                               {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
        type: Promise&lt;<xref uid="azure-arm-storage.StorageAccount" />&gt;
  - name: >-
      update(string, string, StorageAccountUpdateParameters, { customHeaders?:
      [key: string]: string }, ServiceCallback<StorageAccount>)
    uid: azure-arm-storage.StorageAccounts.update_2
    package: azure-arm-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function update(resourceGroupName: string, accountName: string,
        parameters: StorageAccountUpdateParameters, options: { customHeaders?:
        [key: string]: string }, callback: ServiceCallback<StorageAccount>)
      parameters:
        - id: resourceGroupName
          type: string
          description: ''
        - id: accountName
          type: string
          description: ''
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountUpdateParameters" />
          description: ''
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="azure-arm-storage.StorageAccount"
            />&gt;
          description: ''
  - name: >-
      updateWithHttpOperationResponse(string, string,
      StorageAccountUpdateParameters, { customHeaders?: [key: string]: string })
    uid: azure-arm-storage.StorageAccounts.updateWithHttpOperationResponse
    package: azure-arm-storage
    summary: >-
      The update operation can be used to update the SKU, encryption, access
      tier,

      or tags for a storage account. It can also be used to map the account to a

      custom domain. Only one custom domain is supported per storage account;
      the

      replacement/change of custom domain is not supported. In order to replace
      an

      old custom domain, the old value must be cleared/unregistered before a new

      value can be set. The update of multiple properties is supported. This
      call

      does not change the storage keys for the account. If you want to change
      the

      storage account keys, use the regenerate keys operation. The location and

      name of the storage account cannot be changed after creation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateWithHttpOperationResponse(resourceGroupName: string,
        accountName: string, parameters: StorageAccountUpdateParameters,
        options?: { customHeaders?: [key: string]: string }):
        Promise<HttpOperationResponse<StorageAccount>>
      parameters:
        - id: resourceGroupName
          type: string
          description: |
            The name of the resource group within the
            user's subscription. The name is case insensitive.
        - id: accountName
          type: string
          description: >
            The name of the storage account within the

            specified resource group. Storage account names must be between 3
            and 24

            characters in length and use numbers and lower-case letters only.
        - id: parameters
          type: <xref uid="azure-arm-storage.StorageAccountUpdateParameters" />
          description: |
            The parameters to provide for the updated
            account.
        - id: options
          type: '{ customHeaders?: [key: string]: string }'
          description: ''
      return:
        description: A promise is returned
        type: >-
          Promise&lt;HttpOperationResponse&lt;<xref
          uid="azure-arm-storage.StorageAccount" />&gt;&gt;
